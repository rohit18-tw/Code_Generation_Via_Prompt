# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-09 13:55:48
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_044
# ==================================================

package com.ekyc.service.controller;

import com.ekyc.service.dto.EkycResponseDto;
import com.ekyc.service.dto.ErrorResponseDto;
import com.ekyc.service.dto.OtpVerificationDto;
import com.ekyc.service.enums.VerificationStatus;
import com.ekyc.service.service.OtpVerificationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * REST controller for handling OTP verification operations.
 * This controller provides endpoints for verifying OTPs and resending OTPs.
 */
@RestController
@RequestMapping("/api/v1/otp")
public class OtpVerificationController {

    private static final Logger logger = LoggerFactory.getLogger(OtpVerificationController.class);

    private final OtpVerificationService otpVerificationService;

    /**
     * Constructor for OtpVerificationController.
     *
     * @param otpVerificationService The service for OTP verification operations
     */
    @Autowired
    public OtpVerificationController(OtpVerificationService otpVerificationService) {
        this.otpVerificationService = otpVerificationService;
    }

    /**
     * Endpoint for verifying an OTP.
     *
     * @param userId The ID of the user for whom the OTP is being verified
     * @param otpVerificationDto The DTO containing OTP verification details
     * @param request The HTTP request
     * @return A response entity containing the result of the OTP verification
     */
    @PostMapping("/verify/{userId}")
    public ResponseEntity<?> verifyOtp(
            @PathVariable UUID userId,
            @Valid @RequestBody OtpVerificationDto otpVerificationDto,
            HttpServletRequest request) {
        
        logger.info("Received OTP verification request for userId: {}, channelId: {}", 
                userId, otpVerificationDto.getChannelId());
        
        try {
            // Set the userId from the path variable
            otpVerificationDto.setUserId(userId);
            
            // Call the service to verify the OTP
            EkycResponseDto response = otpVerificationService.verifyOtp(otpVerificationDto);
            
            logger.info("OTP verification completed for userId: {}, status: {}", 
                    userId, response.getStatus());
            
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            logger.error("Invalid input for OTP verification: {}", e.getMessage());
            
            ErrorResponseDto errorResponse = new ErrorResponseDto();
            errorResponse.setStatus(HttpStatus.BAD_REQUEST.value());
            errorResponse.setError("Bad Request");
            errorResponse.setMessage(e.getMessage());
            errorResponse.setTimestamp(LocalDateTime.now());
            errorResponse.setPath(request.getRequestURI());
            
            return ResponseEntity.badRequest().body(errorResponse);
        } catch (Exception e) {
            logger.error("Error during OTP verification for userId: {}", userId, e);
            
            ErrorResponseDto errorResponse = new ErrorResponseDto();
            errorResponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
            errorResponse.setError("Internal Server Error");
            errorResponse.setMessage("An unexpected error occurred during OTP verification");
            errorResponse.setTimestamp(LocalDateTime.now());
            errorResponse.setPath(request.getRequestURI());
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * Endpoint for resending an OTP.
     *
     * @param userId The ID of the user for whom the OTP should be resent
     * @param channelId The channel through which the OTP should be resent
     * @param request The HTTP request
     * @return A response entity containing the result of the OTP resend operation
     */
    @PostMapping("/resend/{userId}")
    public ResponseEntity<?> resendOtp(
            @PathVariable UUID userId,
            @RequestParam String channelId,
            HttpServletRequest request) {
        
        logger.info("Received OTP resend request for userId: {}, channelId: {}", 
                userId, channelId);
        
        try {
            // Call the service to resend the OTP
            EkycResponseDto response = otpVerificationService.resendOtp(userId, channelId);
            
            logger.info("OTP resend completed for userId: {}, status: {}", 
                    userId, response.getStatus());
            
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            logger.error("Invalid input for OTP resend: {}", e.getMessage());
            
            ErrorResponseDto errorResponse = new ErrorResponseDto();
            errorResponse.setStatus(HttpStatus.BAD_REQUEST.value());
            errorResponse.setError("Bad Request");
            errorResponse.setMessage(e.getMessage());
            errorResponse.setTimestamp(LocalDateTime.now());
            errorResponse.setPath(request.getRequestURI());
            
            return ResponseEntity.badRequest().body(errorResponse);
        } catch (Exception e) {
            logger.error("Error during OTP resend for userId: {}", userId, e);
            
            ErrorResponseDto errorResponse = new ErrorResponseDto();
            errorResponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
            errorResponse.setError("Internal Server Error");
            errorResponse.setMessage("An unexpected error occurred during OTP resend");
            errorResponse.setTimestamp(LocalDateTime.now());
            errorResponse.setPath(request.getRequestURI());
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
}