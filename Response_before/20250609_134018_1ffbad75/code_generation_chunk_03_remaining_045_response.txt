# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-09 13:56:23
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_045
# ==================================================

package com.ekyc.service.exception;

import com.ekyc.service.dto.ErrorResponseDto;
import com.ekyc.service.util.LoggingUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import javax.persistence.EntityNotFoundException;
import javax.validation.ConstraintViolationException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Global exception handler for standardized error responses across the application.
 * Provides consistent error handling and formatting for all API endpoints.
 */
@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    private static final String GENERIC_ERROR_MESSAGE = "An unexpected error occurred. Please try again later.";

    /**
     * Handles validation exceptions for request body parameters
     *
     * @param ex      The exception
     * @param headers HTTP headers
     * @param status  HTTP status
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex,
            HttpHeaders headers,
            HttpStatus status,
            WebRequest request) {

        Map<String, String> errors = ex.getBindingResult()
                .getFieldErrors()
                .stream()
                .collect(Collectors.toMap(
                        FieldError::getField,
                        fieldError -> fieldError.getDefaultMessage() != null ? fieldError.getDefaultMessage() : "Invalid value",
                        (error1, error2) -> error1 + ", " + error2
                ));

        String path = extractPath(request);
        String errorMessage = "Validation failed for request parameters";
        
        LoggingUtil.error(logger, "Validation error: {}, Path: {}, Details: {}", errorMessage, path, errors);

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.BAD_REQUEST.value(),
                errorMessage,
                errors,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles missing request parameters
     *
     * @param ex      The exception
     * @param headers HTTP headers
     * @param status  HTTP status
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @Override
    protected ResponseEntity<Object> handleMissingServletRequestParameter(
            MissingServletRequestParameterException ex,
            HttpHeaders headers,
            HttpStatus status,
            WebRequest request) {

        String path = extractPath(request);
        String errorMessage = "Required parameter is missing: " + ex.getParameterName();
        
        LoggingUtil.error(logger, "Missing parameter error: {}, Path: {}", errorMessage, path);

        Map<String, String> details = new HashMap<>();
        details.put("parameter", ex.getParameterName());

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.BAD_REQUEST.value(),
                errorMessage,
                details,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles malformed JSON request bodies
     *
     * @param ex      The exception
     * @param headers HTTP headers
     * @param status  HTTP status
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @Override
    protected ResponseEntity<Object> handleHttpMessageNotReadable(
            HttpMessageNotReadableException ex,
            HttpHeaders headers,
            HttpStatus status,
            WebRequest request) {

        String path = extractPath(request);
        String errorMessage = "Malformed JSON request";
        
        LoggingUtil.error(logger, "JSON parsing error: {}, Path: {}, Details: {}", errorMessage, path, ex.getMessage());

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.BAD_REQUEST.value(),
                errorMessage,
                null,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles constraint violation exceptions
     *
     * @param ex      The exception
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity<ErrorResponseDto> handleConstraintViolationException(
            ConstraintViolationException ex,
            WebRequest request) {

        String path = extractPath(request);
        String errorMessage = "Validation failed";

        Map<String, String> errors = ex.getConstraintViolations()
                .stream()
                .collect(Collectors.toMap(
                        violation -> violation.getPropertyPath().toString(),
                        violation -> violation.getMessage(),
                        (error1, error2) -> error1 + ", " + error2
                ));
        
        LoggingUtil.error(logger, "Constraint violation: {}, Path: {}, Details: {}", errorMessage, path, errors);

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.BAD_REQUEST.value(),
                errorMessage,
                errors,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles type mismatch exceptions for request parameters
     *
     * @param ex      The exception
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public ResponseEntity<ErrorResponseDto> handleMethodArgumentTypeMismatch(
            MethodArgumentTypeMismatchException ex,
            WebRequest request) {

        String path = extractPath(request);
        String errorMessage = "Type mismatch for parameter: " + ex.getName();
        
        LoggingUtil.error(logger, "Type mismatch error: {}, Path: {}, Required type: {}", 
                errorMessage, path, ex.getRequiredType() != null ? ex.getRequiredType().getSimpleName() : "unknown");

        Map<String, String> details = new HashMap<>();
        details.put("parameter", ex.getName());
        details.put("requiredType", ex.getRequiredType() != null ? ex.getRequiredType().getSimpleName() : "unknown");
        details.put("providedValue", String.valueOf(ex.getValue()));

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.BAD_REQUEST.value(),
                errorMessage,
                details,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles entity not found exceptions
     *
     * @param ex      The exception
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(EntityNotFoundException.class)
    public ResponseEntity<ErrorResponseDto> handleEntityNotFoundException(
            EntityNotFoundException ex,
            WebRequest request) {

        String path = extractPath(request);
        String errorMessage = ex.getMessage();
        
        LoggingUtil.error(logger, "Entity not found: {}, Path: {}", errorMessage, path);

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.NOT_FOUND.value(),
                errorMessage,
                null,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
    }

    /**
     * Handles database access exceptions
     *
     * @param ex      The exception
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(DataAccessException.class)
    public ResponseEntity<ErrorResponseDto> handleDataAccessException(
            DataAccessException ex,
            WebRequest request) {

        String path = extractPath(request);
        
        LoggingUtil.error(logger, "Database error occurred: {}, Path: {}", ex.getMessage(), path);

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.INTERNAL_SERVER_ERROR.value(),
                GENERIC_ERROR_MESSAGE,
                null,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Handles WebClient response exceptions (for external API calls)
     *
     * @param ex      The exception
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(WebClientResponseException.class)
    public ResponseEntity<ErrorResponseDto> handleWebClientResponseException(
            WebClientResponseException ex,
            WebRequest request) {

        String path = extractPath(request);
        HttpStatus status = HttpStatus.valueOf(ex.getRawStatusCode());
        String errorMessage = "External service error";
        
        LoggingUtil.error(logger, "External API error: Status: {}, Body: {}, Path: {}", 
                ex.getRawStatusCode(), ex.getResponseBodyAsString(), path);

        Map<String, String> details = new HashMap<>();
        details.put("externalServiceStatus", String.valueOf(ex.getRawStatusCode()));
        
        // Don't expose the full response body in production, but include relevant info
        if (ex.getResponseBodyAsString() != null && !ex.getResponseBodyAsString().isEmpty()) {
            details.put("externalServiceMessage", "External service returned an error response");
        }

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                status.value(),
                errorMessage,
                details,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, status);
    }

    /**
     * Handles all other uncaught exceptions
     *
     * @param ex      The exception
     * @param request Web request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponseDto> handleGenericException(
            Exception ex,
            WebRequest request) {

        String path = extractPath(request);
        
        LoggingUtil.error(logger, "Unhandled exception: {}, Type: {}, Path: {}", 
                ex.getMessage(), ex.getClass().getName(), path, ex);

        ErrorResponseDto errorResponse = new ErrorResponseDto(
                HttpStatus.INTERNAL_SERVER_ERROR.value(),
                GENERIC_ERROR_MESSAGE,
                null,
                LocalDateTime.now(),
                path
        );

        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Extracts the request path from the WebRequest
     *
     * @param request The web request
     * @return The request path
     */
    private String extractPath(WebRequest request) {
        if (request instanceof ServletWebRequest) {
            return ((ServletWebRequest) request).getRequest().getRequestURI();
        }
        return "unknown";
    }
}