# LLM Response - code_generation_chunk_01_config
# Timestamp: 2025-06-09 13:43:12
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_01_config_004
# ==================================================

package com.ekyc.service.config;

import io.netty.channel.ChannelOption;
import io.netty.handler.timeout.ReadTimeoutHandler;
import io.netty.handler.timeout.WriteTimeoutHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.ExchangeStrategies;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import reactor.netty.http.client.HttpClient;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

/**
 * Configuration class for WebClient instances used to call external APIs.
 * This class provides customized WebClient beans with proper timeout settings,
 * logging, and error handling.
 */
@Configuration
public class WebClientConfig {

    private static final Logger logger = LoggerFactory.getLogger(WebClientConfig.class);
    
    @Value("${webclient.timeout.connect:5000}")
    private int connectTimeoutMs;
    
    @Value("${webclient.timeout.read:5000}")
    private int readTimeoutMs;
    
    @Value("${webclient.timeout.write:5000}")
    private int writeTimeoutMs;
    
    @Value("${webclient.max-in-memory-size:16777216}") // 16MB default
    private int maxInMemorySize;

    /**
     * Creates a base WebClient builder with common configurations.
     * 
     * @return WebClient.Builder with common configurations
     */
    @Bean
    public WebClient.Builder webClientBuilder() {
        // Configure HTTP client with timeouts
        HttpClient httpClient = HttpClient.create()
                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeoutMs)
                .responseTimeout(Duration.ofMillis(readTimeoutMs))
                .doOnConnected(conn -> 
                    conn.addHandlerLast(new ReadTimeoutHandler(readTimeoutMs, TimeUnit.MILLISECONDS))
                        .addHandlerLast(new WriteTimeoutHandler(writeTimeoutMs, TimeUnit.MILLISECONDS)));
        
        // Configure memory allocation for response data
        ExchangeStrategies exchangeStrategies = ExchangeStrategies.builder()
                .codecs(configurer -> configurer.defaultCodecs().maxInMemorySize(maxInMemorySize))
                .build();
        
        // Create and return the WebClient builder
        return WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(httpClient))
                .exchangeStrategies(exchangeStrategies)
                .filter(logRequest())
                .filter(logResponse())
                .filter(handleErrors());
    }
    
    /**
     * Creates a default WebClient instance using the builder.
     * 
     * @param webClientBuilder the builder to use
     * @return a configured WebClient instance
     */
    @Bean
    public WebClient webClient(WebClient.Builder webClientBuilder) {
        return webClientBuilder.build();
    }
    
    /**
     * Filter function to log outgoing requests.
     * Sensitive information is masked in logs.
     * 
     * @return ExchangeFilterFunction for logging requests
     */
    private ExchangeFilterFunction logRequest() {
        return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> {
            logger.debug("Request: {} {}", 
                    clientRequest.method(), 
                    clientRequest.url());
            clientRequest.headers().forEach((name, values) -> {
                // Mask sensitive headers like Authorization
                if (name.equalsIgnoreCase("Authorization") || 
                    name.equalsIgnoreCase("X-API-Key")) {
                    logger.debug("{}={}", name, "******");
                } else {
                    logger.debug("{}={}", name, values);
                }
            });
            return Mono.just(clientRequest);
        });
    }
    
    /**
     * Filter function to log responses.
     * 
     * @return ExchangeFilterFunction for logging responses
     */
    private ExchangeFilterFunction logResponse() {
        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {
            logger.debug("Response status: {}", clientResponse.statusCode());
            clientResponse.headers().asHttpHeaders().forEach((name, values) -> {
                logger.debug("{}={}", name, values);
            });
            return Mono.just(clientResponse);
        });
    }
    
    /**
     * Filter function to handle errors in a centralized way.
     * 
     * @return ExchangeFilterFunction for error handling
     */
    private ExchangeFilterFunction handleErrors() {
        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {
            if (clientResponse.statusCode().isError()) {
                return clientResponse.bodyToMono(String.class)
                        .flatMap(errorBody -> {
                            logger.error("Error response: {} - {}", 
                                    clientResponse.statusCode(), 
                                    errorBody);
                            return Mono.just(clientResponse);
                        });
            } else {
                return Mono.just(clientResponse);
            }
        });
    }
}