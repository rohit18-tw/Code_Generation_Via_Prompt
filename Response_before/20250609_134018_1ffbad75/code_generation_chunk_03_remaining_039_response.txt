# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-09 13:53:49
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_039
# ==================================================

package com.ekyc.service.service.impl;

import com.ekyc.service.dto.UidaiOtpInitiateRequestDto;
import com.ekyc.service.dto.UidaiOtpInitiateResponseDto;
import com.ekyc.service.dto.UidaiOtpVerifyRequestDto;
import com.ekyc.service.dto.UidaiOtpVerifyResponseDto;
import com.ekyc.service.dto.UidaiKycRequestDto;
import com.ekyc.service.dto.UidaiKycResponseDto;
import com.ekyc.service.exception.UidaiApiException;
import com.ekyc.service.service.UidaiApiService;
import com.ekyc.service.util.LoggingUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;
import reactor.util.retry.Retry;

import java.time.Duration;
import java.util.regex.Pattern;

/**
 * Implementation of the UIDAI API service for interacting with the UIDAI (Aadhaar) system.
 * This service handles OTP generation, verification, and eKYC data retrieval from UIDAI.
 */
@Service
public class UidaiApiServiceImpl implements UidaiApiService {

    private static final Logger logger = LoggerFactory.getLogger(UidaiApiServiceImpl.class);
    private static final Pattern AADHAAR_PATTERN = Pattern.compile("^[0-9]{12}$");
    private static final int MAX_RETRY_ATTEMPTS = 3;
    private static final int RETRY_DELAY_MS = 1000;

    private final WebClient webClient;

    @Value("${uidai.api.base-url}")
    private String uidaiBaseUrl;

    @Value("${uidai.api.otp.initiate-endpoint}")
    private String otpInitiateEndpoint;

    @Value("${uidai.api.otp.verify-endpoint}")
    private String otpVerifyEndpoint;

    @Value("${uidai.api.kyc.endpoint}")
    private String kycEndpoint;

    @Value("${uidai.api.auth.token}")
    private String authToken;

    /**
     * Constructor for UidaiApiServiceImpl.
     * Initializes the WebClient for making HTTP requests to UIDAI APIs.
     */
    public UidaiApiServiceImpl(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .baseUrl(uidaiBaseUrl)
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();
    }

    /**
     * Initiates the OTP generation process with UIDAI for the given Aadhaar number.
     *
     * @param requestDto The request containing Aadhaar number and other required details
     * @return Response from UIDAI containing transaction ID and status
     * @throws UidaiApiException If there's an error communicating with UIDAI API
     */
    @Override
    public UidaiOtpInitiateResponseDto initiateOtp(UidaiOtpInitiateRequestDto requestDto) {
        if (!isValidAadhaarFormat(requestDto.getAadhaarNumber())) {
            logger.error("Invalid Aadhaar number format");
            throw new UidaiApiException("Invalid Aadhaar number format", HttpStatus.BAD_REQUEST);
        }

        LoggingUtil.info(logger, "Initiating OTP for Aadhaar: {}", requestDto.getAadhaarNumber());

        try {
            return webClient.post()
                    .uri(otpInitiateEndpoint)
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + authToken)
                    .bodyValue(requestDto)
                    .retrieve()
                    .bodyToMono(UidaiOtpInitiateResponseDto.class)
                    .retryWhen(Retry.fixedDelay(MAX_RETRY_ATTEMPTS, Duration.ofMillis(RETRY_DELAY_MS))
                            .filter(this::isRetryableException))
                    .doOnSuccess(response -> LoggingUtil.info(logger, "OTP initiated successfully for transaction: {}", response.getTransactionId()))
                    .doOnError(error -> LoggingUtil.error(logger, "Error initiating OTP: {}", error.getMessage()))
                    .block();
        } catch (WebClientResponseException ex) {
            LoggingUtil.error(logger, "UIDAI API error: {} - {}", ex.getStatusCode(), ex.getResponseBodyAsString());
            throw new UidaiApiException("Error initiating OTP with UIDAI: " + ex.getMessage(), ex.getStatusCode());
        } catch (Exception ex) {
            LoggingUtil.error(logger, "Unexpected error initiating OTP: {}", ex.getMessage());
            throw new UidaiApiException("Unexpected error initiating OTP: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Verifies the OTP provided by the user with UIDAI.
     *
     * @param requestDto The request containing transaction ID, OTP, and other required details
     * @return Response from UIDAI containing verification status
     * @throws UidaiApiException If there's an error communicating with UIDAI API
     */
    @Override
    public UidaiOtpVerifyResponseDto verifyOtp(UidaiOtpVerifyRequestDto requestDto) {
        LoggingUtil.info(logger, "Verifying OTP for transaction: {}", requestDto.getTransactionId());

        try {
            return webClient.post()
                    .uri(otpVerifyEndpoint)
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + authToken)
                    .bodyValue(requestDto)
                    .retrieve()
                    .bodyToMono(UidaiOtpVerifyResponseDto.class)
                    .retryWhen(Retry.fixedDelay(MAX_RETRY_ATTEMPTS, Duration.ofMillis(RETRY_DELAY_MS))
                            .filter(this::isRetryableException))
                    .doOnSuccess(response -> LoggingUtil.info(logger, "OTP verification completed with status: {}", response.getStatus()))
                    .doOnError(error -> LoggingUtil.error(logger, "Error verifying OTP: {}", error.getMessage()))
                    .block();
        } catch (WebClientResponseException ex) {
            LoggingUtil.error(logger, "UIDAI API error: {} - {}", ex.getStatusCode(), ex.getResponseBodyAsString());
            throw new UidaiApiException("Error verifying OTP with UIDAI: " + ex.getMessage(), ex.getStatusCode());
        } catch (Exception ex) {
            LoggingUtil.error(logger, "Unexpected error verifying OTP: {}", ex.getMessage());
            throw new UidaiApiException("Unexpected error verifying OTP: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Retrieves KYC data from UIDAI for the given transaction ID after successful OTP verification.
     *
     * @param requestDto The request containing transaction ID and other required details
     * @return Response from UIDAI containing KYC data
     * @throws UidaiApiException If there's an error communicating with UIDAI API
     */
    @Override
    public UidaiKycResponseDto retrieveKycData(UidaiKycRequestDto requestDto) {
        LoggingUtil.info(logger, "Retrieving KYC data for transaction: {}", requestDto.getTransactionId());

        try {
            return webClient.post()
                    .uri(kycEndpoint)
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + authToken)
                    .bodyValue(requestDto)
                    .retrieve()
                    .bodyToMono(UidaiKycResponseDto.class)
                    .retryWhen(Retry.fixedDelay(MAX_RETRY_ATTEMPTS, Duration.ofMillis(RETRY_DELAY_MS))
                            .filter(this::isRetryableException))
                    .doOnSuccess(response -> LoggingUtil.info(logger, "KYC data retrieved successfully for transaction: {}", requestDto.getTransactionId()))
                    .doOnError(error -> LoggingUtil.error(logger, "Error retrieving KYC data: {}", error.getMessage()))
                    .block();
        } catch (WebClientResponseException ex) {
            LoggingUtil.error(logger, "UIDAI API error: {} - {}", ex.getStatusCode(), ex.getResponseBodyAsString());
            throw new UidaiApiException("Error retrieving KYC data from UIDAI: " + ex.getMessage(), ex.getStatusCode());
        } catch (Exception ex) {
            LoggingUtil.error(logger, "Unexpected error retrieving KYC data: {}", ex.getMessage());
            throw new UidaiApiException("Unexpected error retrieving KYC data: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Validates the format of an Aadhaar number.
     * A valid Aadhaar number is a 12-digit number.
     *
     * @param aadhaarNumber The Aadhaar number to validate
     * @return true if the format is valid, false otherwise
     */
    @Override
    public boolean isValidAadhaarFormat(String aadhaarNumber) {
        if (aadhaarNumber == null) {
            return false;
        }
        return AADHAAR_PATTERN.matcher(aadhaarNumber).matches();
    }

    /**
     * Determines if an exception is retryable.
     * Generally, server errors (5xx) are retryable, while client errors (4xx) are not.
     *
     * @param throwable The exception to check
     * @return true if the exception is retryable, false otherwise
     */
    private boolean isRetryableException(Throwable throwable) {
        if (throwable instanceof WebClientResponseException) {
            WebClientResponseException wcre = (WebClientResponseException) throwable;
            return wcre.getStatusCode().is5xxServerError();
        }
        return true; // Retry on non-HTTP exceptions (network issues, etc.)
    }
}