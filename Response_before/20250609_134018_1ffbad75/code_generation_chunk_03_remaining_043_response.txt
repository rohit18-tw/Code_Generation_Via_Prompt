# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-09 13:55:30
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_043
# ==================================================

package com.ekyc.service.controller;

import com.ekyc.service.dto.EkycRequestDto;
import com.ekyc.service.dto.EkycResponseDto;
import com.ekyc.service.dto.ErrorResponseDto;
import com.ekyc.service.enums.VerificationStatus;
import com.ekyc.service.service.EkycService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * REST controller for eKYC operations.
 * Provides endpoints for verification, status checking, and metrics.
 */
@RestController
@RequestMapping("/api/v1/ekyc")
@Validated
public class EkycController {

    private static final Logger logger = LoggerFactory.getLogger(EkycController.class);
    
    private final EkycService ekycService;
    
    @Autowired
    public EkycController(EkycService ekycService) {
        this.ekycService = ekycService;
    }
    
    /**
     * Initiates a new eKYC verification process.
     *
     * @param requestDto The eKYC verification request data
     * @param request The HTTP request
     * @return ResponseEntity containing the verification response
     */
    @PostMapping(value = "/verify", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<EkycResponseDto> verifyIdentity(@Valid @RequestBody EkycRequestDto requestDto, 
                                                         HttpServletRequest request) {
        logger.info("Received eKYC verification request for user with ID type: {}", requestDto.getIdType());
        
        try {
            EkycResponseDto responseDto = ekycService.verifyIdentity(requestDto);
            logger.info("eKYC verification completed with status: {}", responseDto.getStatus());
            return ResponseEntity.ok(responseDto);
        } catch (Exception e) {
            logger.error("Error during eKYC verification: {}", e.getMessage(), e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error processing verification request", e);
        }
    }
    
    /**
     * Retrieves the status of a verification by transaction ID.
     *
     * @param transactionId The unique transaction ID
     * @return ResponseEntity containing the verification status
     */
    @GetMapping(value = "/status/{transactionId}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<EkycResponseDto> getVerificationStatus(@PathVariable @NotBlank String transactionId) {
        logger.info("Retrieving verification status for transaction ID: {}", transactionId);
        
        try {
            EkycResponseDto responseDto = ekycService.getVerificationStatus(transactionId);
            logger.info("Retrieved verification status: {} for transaction ID: {}", responseDto.getStatus(), transactionId);
            return ResponseEntity.ok(responseDto);
        } catch (Exception e) {
            logger.error("Error retrieving verification status for transaction ID {}: {}", transactionId, e.getMessage(), e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error retrieving verification status", e);
        }
    }
    
    /**
     * Retrieves all verifications for a specific user.
     *
     * @param userId The user ID
     * @return ResponseEntity containing a list of verification responses
     */
    @GetMapping(value = "/user/{userId}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<EkycResponseDto>> getUserVerifications(@PathVariable @NotBlank String userId) {
        logger.info("Retrieving verification history for user ID: {}", userId);
        
        try {
            List<EkycResponseDto> verifications = ekycService.getUserVerifications(userId);
            logger.info("Retrieved {} verification records for user ID: {}", verifications.size(), userId);
            return ResponseEntity.ok(verifications);
        } catch (Exception e) {
            logger.error("Error retrieving verification history for user ID {}: {}", userId, e.getMessage(), e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error retrieving user verifications", e);
        }
    }
    
    /**
     * Updates the status of a verification.
     *
     * @param transactionId The unique transaction ID
     * @param status The new verification status
     * @return ResponseEntity containing the updated verification response
     */
    @PutMapping(value = "/status/{transactionId}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<EkycResponseDto> updateVerificationStatus(
            @PathVariable @NotBlank String transactionId,
            @RequestParam @NotNull VerificationStatus status) {
        logger.info("Updating verification status to {} for transaction ID: {}", status, transactionId);
        
        try {
            EkycResponseDto responseDto = ekycService.updateVerificationStatus(transactionId, status);
            logger.info("Updated verification status to {} for transaction ID: {}", status, transactionId);
            return ResponseEntity.ok(responseDto);
        } catch (Exception e) {
            logger.error("Error updating verification status for transaction ID {}: {}", transactionId, e.getMessage(), e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error updating verification status", e);
        }
    }
    
    /**
     * Retrieves verification metrics for a specified date range.
     *
     * @param startDate Start date for the reporting period (format: yyyy-MM-dd)
     * @param endDate End date for the reporting period (format: yyyy-MM-dd)
     * @return ResponseEntity containing verification metrics
     */
    @GetMapping(value = "/metrics", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Object> getVerificationMetrics(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        logger.info("Retrieving verification metrics for period: {} to {}", startDate, endDate);
        
        try {
            Object metrics = ekycService.getVerificationMetrics(startDate.toString(), endDate.toString());
            logger.info("Retrieved verification metrics for period: {} to {}", startDate, endDate);
            return ResponseEntity.ok(metrics);
        } catch (Exception e) {
            logger.error("Error retrieving verification metrics for period {} to {}: {}", 
                    startDate, endDate, e.getMessage(), e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error retrieving verification metrics", e);
        }
    }
    
    /**
     * Global exception handler for the controller.
     *
     * @param e The exception that was thrown
     * @param request The HTTP request
     * @return ResponseEntity containing error details
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponseDto> handleException(Exception e, HttpServletRequest request) {
        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;
        
        if (e instanceof ResponseStatusException) {
            status = ((ResponseStatusException) e).getStatus();
        }
        
        ErrorResponseDto errorResponse = new ErrorResponseDto();
        errorResponse.setTimestamp(LocalDateTime.now());
        errorResponse.setStatus(status.value());
        errorResponse.setError(status.getReasonPhrase());
        errorResponse.setMessage(e.getMessage());
        errorResponse.setPath(request.getRequestURI());
        
        logger.error("Request to {} resulted in error: {}", request.getRequestURI(), e.getMessage(), e);
        
        return new ResponseEntity<>(errorResponse, status);
    }
}