# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-09 13:58:40
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_050
# ==================================================

package com.mock.uidai.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Utility class for masking Personally Identifiable Information (PII) in logs and other outputs.
 * This class provides methods to mask sensitive data like Aadhaar numbers, phone numbers, 
 * email addresses, and other PII to ensure data privacy and compliance with regulations.
 */
public final class PiiMaskingUtil {
    
    private static final Logger logger = LoggerFactory.getLogger(PiiMaskingUtil.class);
    
    // Regex patterns for different types of PII
    private static final Pattern AADHAAR_PATTERN = Pattern.compile("\\b[2-9]{1}[0-9]{11}\\b");
    private static final Pattern PHONE_PATTERN = Pattern.compile("\\b[6-9][0-9]{9}\\b");
    private static final Pattern EMAIL_PATTERN = Pattern.compile("\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}\\b");
    private static final Pattern PAN_PATTERN = Pattern.compile("\\b[A-Z]{5}[0-9]{4}[A-Z]{1}\\b");
    private static final Pattern CREDIT_CARD_PATTERN = Pattern.compile("\\b(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\\d{3})\\d{11})\\b");
    
    // Masking constants
    private static final String AADHAAR_MASK = "XXXX-XXXX-";
    private static final String PHONE_MASK = "XXX-XXX-";
    private static final String EMAIL_MASK_REGEX = "(?<=.{2}).(?=[^@]*?@)|(?<=@.{2}).(?=.*\\.)";
    private static final String EMAIL_MASK_REPLACEMENT = "*";
    private static final String PAN_MASK = "XXXXX";
    private static final String CREDIT_CARD_MASK = "XXXX-XXXX-XXXX-";
    
    /**
     * Private constructor to prevent instantiation of utility class.
     */
    private PiiMaskingUtil() {
        throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
    }
    
    /**
     * Masks an Aadhaar number by showing only the last 4 digits.
     * 
     * @param aadhaarNumber The Aadhaar number to mask
     * @return Masked Aadhaar number or original string if not a valid Aadhaar
     */
    public static String maskAadhaar(String aadhaarNumber) {
        if (aadhaarNumber == null || aadhaarNumber.isEmpty()) {
            return aadhaarNumber;
        }
        
        try {
            if (aadhaarNumber.length() == 12 && AADHAAR_PATTERN.matcher(aadhaarNumber).matches()) {
                return AADHAAR_MASK + aadhaarNumber.substring(8);
            }
            return aadhaarNumber;
        } catch (Exception e) {
            logger.warn("Error masking Aadhaar number", e);
            return aadhaarNumber;
        }
    }
    
    /**
     * Masks a phone number by showing only the last 4 digits.
     * 
     * @param phoneNumber The phone number to mask
     * @return Masked phone number or original string if not a valid phone number
     */
    public static String maskPhoneNumber(String phoneNumber) {
        if (phoneNumber == null || phoneNumber.isEmpty()) {
            return phoneNumber;
        }
        
        try {
            if (phoneNumber.length() == 10 && PHONE_PATTERN.matcher(phoneNumber).matches()) {
                return PHONE_MASK + phoneNumber.substring(6);
            }
            return phoneNumber;
        } catch (Exception e) {
            logger.warn("Error masking phone number", e);
            return phoneNumber;
        }
    }
    
    /**
     * Masks an email address by hiding characters in the username and domain.
     * Example: john.doe@example.com becomes jo**.**e@ex*****.com
     * 
     * @param email The email address to mask
     * @return Masked email address or original string if not a valid email
     */
    public static String maskEmail(String email) {
        if (email == null || email.isEmpty()) {
            return email;
        }
        
        try {
            if (EMAIL_PATTERN.matcher(email).matches()) {
                return email.replaceAll(EMAIL_MASK_REGEX, EMAIL_MASK_REPLACEMENT);
            }
            return email;
        } catch (Exception e) {
            logger.warn("Error masking email address", e);
            return email;
        }
    }
    
    /**
     * Masks a PAN (Permanent Account Number) by showing only the last 5 characters.
     * 
     * @param pan The PAN to mask
     * @return Masked PAN or original string if not a valid PAN
     */
    public static String maskPan(String pan) {
        if (pan == null || pan.isEmpty()) {
            return pan;
        }
        
        try {
            if (pan.length() == 10 && PAN_PATTERN.matcher(pan).matches()) {
                return PAN_MASK + pan.substring(5);
            }
            return pan;
        } catch (Exception e) {
            logger.warn("Error masking PAN", e);
            return pan;
        }
    }
    
    /**
     * Masks a credit card number by showing only the last 4 digits.
     * 
     * @param creditCardNumber The credit card number to mask
     * @return Masked credit card number or original string if not a valid credit card number
     */
    public static String maskCreditCard(String creditCardNumber) {
        if (creditCardNumber == null || creditCardNumber.isEmpty()) {
            return creditCardNumber;
        }
        
        try {
            creditCardNumber = creditCardNumber.replaceAll("\\s+", "");
            if (CREDIT_CARD_PATTERN.matcher(creditCardNumber).matches()) {
                return CREDIT_CARD_MASK + creditCardNumber.substring(creditCardNumber.length() - 4);
            }
            return creditCardNumber;
        } catch (Exception e) {
            logger.warn("Error masking credit card number", e);
            return creditCardNumber;
        }
    }
    
    /**
     * Masks all PII in a given text string.
     * This method applies all masking functions to the input text.
     * 
     * @param text The text containing potential PII
     * @return Text with all PII masked
     */
    public static String maskAllPii(String text) {
        if (text == null || text.isEmpty()) {
            return text;
        }
        
        try {
            String maskedText = text;
            
            // Mask Aadhaar numbers
            Matcher aadhaarMatcher = AADHAAR_PATTERN.matcher(maskedText);
            while (aadhaarMatcher.find()) {
                String aadhaar = aadhaarMatcher.group();
                maskedText = maskedText.replace(aadhaar, maskAadhaar(aadhaar));
            }
            
            // Mask phone numbers
            Matcher phoneMatcher = PHONE_PATTERN.matcher(maskedText);
            while (phoneMatcher.find()) {
                String phone = phoneMatcher.group();
                maskedText = maskedText.replace(phone, maskPhoneNumber(phone));
            }
            
            // Mask email addresses
            Matcher emailMatcher = EMAIL_PATTERN.matcher(maskedText);
            while (emailMatcher.find()) {
                String email = emailMatcher.group();
                maskedText = maskedText.replace(email, maskEmail(email));
            }
            
            // Mask PAN numbers
            Matcher panMatcher = PAN_PATTERN.matcher(maskedText);
            while (panMatcher.find()) {
                String pan = panMatcher.group();
                maskedText = maskedText.replace(pan, maskPan(pan));
            }
            
            // Mask credit card numbers
            Matcher creditCardMatcher = CREDIT_CARD_PATTERN.matcher(maskedText);
            while (creditCardMatcher.find()) {
                String creditCard = creditCardMatcher.group();
                maskedText = maskedText.replace(creditCard, maskCreditCard(creditCard));
            }
            
            return maskedText;
        } catch (Exception e) {
            logger.warn("Error masking PII in text", e);
            return text;
        }
    }
    
    /**
     * Masks a string if it matches any known PII pattern.
     * This method detects the type of PII and applies the appropriate masking.
     * 
     * @param input The potential PII string
     * @return Masked string if it's PII, otherwise the original string
     */
    public static String maskPiiIfPresent(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }
        
        try {
            if (AADHAAR_PATTERN.matcher(input).matches()) {
                return maskAadhaar(input);
            } else if (PHONE_PATTERN.matcher(input).matches()) {
                return maskPhoneNumber(input);
            } else if (EMAIL_PATTERN.matcher(input).matches()) {
                return maskEmail(input);
            } else if (PAN_PATTERN.matcher(input).matches()) {
                return maskPan(input);
            } else if (CREDIT_CARD_PATTERN.matcher(input).matches()) {
                return maskCreditCard(input);
            }
            return input;
        } catch (Exception e) {
            logger.warn("Error in maskPiiIfPresent", e);
            return input;
        }
    }
}