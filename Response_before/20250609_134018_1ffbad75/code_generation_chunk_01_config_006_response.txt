# LLM Response - code_generation_chunk_01_config
# Timestamp: 2025-06-09 13:43:44
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_01_config_006
# ==================================================

-- Create schema
CREATE SCHEMA IF NOT EXISTS ekyc;

-- Set search path
SET search_path TO ekyc;

-- Create enum types
CREATE TYPE verification_status AS ENUM ('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'EXPIRED');
CREATE TYPE document_type AS ENUM ('PASSPORT', 'NATIONAL_ID', 'DRIVERS_LICENSE', 'RESIDENCE_PERMIT', 'OTHER');
CREATE TYPE verification_step AS ENUM ('DOCUMENT_UPLOAD', 'FACE_VERIFICATION', 'LIVENESS_CHECK', 'DOCUMENT_VERIFICATION', 'BACKGROUND_CHECK');
CREATE TYPE face_match_result AS ENUM ('MATCH', 'NO_MATCH', 'INCONCLUSIVE', 'ERROR');
CREATE TYPE liveness_check_result AS ENUM ('PASS', 'FAIL', 'INCONCLUSIVE', 'ERROR');

-- Create tables
CREATE TABLE verification_requests (
    id UUID PRIMARY KEY,
    user_id VARCHAR(100) NOT NULL,
    reference_id VARCHAR(100) UNIQUE NOT NULL,
    status verification_status NOT NULL DEFAULT 'PENDING',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    completed_at TIMESTAMP WITH TIME ZONE,
    failure_reason TEXT,
    metadata JSONB,
    callback_url VARCHAR(255),
    ip_address VARCHAR(45),
    user_agent TEXT
);

CREATE TABLE verification_steps (
    id UUID PRIMARY KEY,
    verification_id UUID NOT NULL REFERENCES verification_requests(id) ON DELETE CASCADE,
    step_type verification_step NOT NULL,
    status verification_status NOT NULL DEFAULT 'PENDING',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP WITH TIME ZONE,
    failure_reason TEXT,
    attempt_count INTEGER NOT NULL DEFAULT 0,
    metadata JSONB,
    UNIQUE (verification_id, step_type)
);

CREATE TABLE documents (
    id UUID PRIMARY KEY,
    verification_id UUID NOT NULL REFERENCES verification_requests(id) ON DELETE CASCADE,
    document_type document_type NOT NULL,
    document_number VARCHAR(100),
    issuing_country VARCHAR(3),
    expiry_date DATE,
    issue_date DATE,
    front_image_url TEXT,
    back_image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    verification_status verification_status NOT NULL DEFAULT 'PENDING',
    verification_result JSONB,
    extracted_data JSONB,
    failure_reason TEXT
);

CREATE TABLE face_verifications (
    id UUID PRIMARY KEY,
    verification_id UUID NOT NULL REFERENCES verification_requests(id) ON DELETE CASCADE,
    document_id UUID REFERENCES documents(id) ON DELETE CASCADE,
    selfie_image_url TEXT,
    match_result face_match_result,
    confidence_score DECIMAL(5,2),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    verification_status verification_status NOT NULL DEFAULT 'PENDING',
    failure_reason TEXT,
    metadata JSONB
);

CREATE TABLE liveness_checks (
    id UUID PRIMARY KEY,
    verification_id UUID NOT NULL REFERENCES verification_requests(id) ON DELETE CASCADE,
    video_url TEXT,
    result liveness_check_result,
    confidence_score DECIMAL(5,2),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    verification_status verification_status NOT NULL DEFAULT 'PENDING',
    failure_reason TEXT,
    metadata JSONB
);

CREATE TABLE audit_logs (
    id UUID PRIMARY KEY,
    verification_id UUID REFERENCES verification_requests(id) ON DELETE SET NULL,
    event_type VARCHAR(100) NOT NULL,
    event_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_id VARCHAR(100),
    ip_address VARCHAR(45),
    user_agent TEXT,
    details JSONB
);

-- Create indexes
CREATE INDEX idx_verification_requests_user_id ON verification_requests(user_id);
CREATE INDEX idx_verification_requests_status ON verification_requests(status);
CREATE INDEX idx_verification_requests_created_at ON verification_requests(created_at);
CREATE INDEX idx_verification_steps_verification_id ON verification_steps(verification_id);
CREATE INDEX idx_verification_steps_status ON verification_steps(status);
CREATE INDEX idx_documents_verification_id ON documents(verification_id);
CREATE INDEX idx_documents_document_type ON documents(document_type);
CREATE INDEX idx_documents_verification_status ON documents(verification_status);
CREATE INDEX idx_face_verifications_verification_id ON face_verifications(verification_id);
CREATE INDEX idx_face_verifications_document_id ON face_verifications(document_id);
CREATE INDEX idx_liveness_checks_verification_id ON liveness_checks(verification_id);
CREATE INDEX idx_audit_logs_verification_id ON audit_logs(verification_id);
CREATE INDEX idx_audit_logs_event_timestamp ON audit_logs(event_timestamp);

-- Create function for updating timestamps
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for updating timestamps
CREATE TRIGGER update_verification_requests_timestamp
BEFORE UPDATE ON verification_requests
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_verification_steps_timestamp
BEFORE UPDATE ON verification_steps
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_documents_timestamp
BEFORE UPDATE ON documents
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_face_verifications_timestamp
BEFORE UPDATE ON face_verifications
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_liveness_checks_timestamp
BEFORE UPDATE ON liveness_checks
FOR EACH ROW EXECUTE FUNCTION update_timestamp();