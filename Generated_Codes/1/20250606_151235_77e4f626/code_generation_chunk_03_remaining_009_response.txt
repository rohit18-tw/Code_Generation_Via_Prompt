# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-06 15:16:33
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_009
# ==================================================

package com.ekyc.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Bean;
import org.springframework.core.env.Environment;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

/**
 * Main application class for the eKYC Service.
 * This service handles electronic Know Your Customer verification processes.
 */
@SpringBootApplication
@EnableAsync
@EnableScheduling
public class EkycServiceApplication {
    
    private static final Logger logger = LoggerFactory.getLogger(EkycServiceApplication.class);

    /**
     * Main method to start the eKYC Service application.
     *
     * @param args Command line arguments passed to the application
     */
    public static void main(String[] args) {
        SpringApplication app = new SpringApplication(EkycServiceApplication.class);
        Environment env = app.run(args).getEnvironment();
        logApplicationStartup(env);
    }

    /**
     * Logs application startup information including URL, profile, and configuration details.
     *
     * @param env Spring environment containing application configuration
     */
    private static void logApplicationStartup(Environment env) {
        String protocol = "http";
        if (env.getProperty("server.ssl.key-store") != null) {
            protocol = "https";
        }
        
        String serverPort = env.getProperty("server.port");
        String contextPath = env.getProperty("server.servlet.context-path");
        if (contextPath == null || contextPath.isEmpty()) {
            contextPath = "/";
        }
        
        String hostAddress = "localhost";
        try {
            hostAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            logger.warn("Could not determine host address", e);
        }

        String[] profiles = env.getActiveProfiles();
        if (profiles.length == 0) {
            logger.warn("No active Spring profiles detected. Running with default configuration.");
        } else {
            logger.info("Application is running with the following profiles: {}", Arrays.toString(profiles));
        }

        logger.info(
                "\n----------------------------------------------------------\n\t" +
                "eKYC Service is running! Access URLs:\n\t" +
                "Local: \t\t{}://localhost:{}{}\n\t" +
                "External: \t{}://{}:{}{}\n\t" +
                "Profile(s): \t{}\n----------------------------------------------------------",
                protocol,
                serverPort,
                contextPath,
                protocol,
                hostAddress,
                serverPort,
                contextPath,
                profiles.length > 0 ? Arrays.toString(profiles) : "default"
        );
    }

    /**
     * Bean that logs application startup completion.
     *
     * @return ApplicationListener for ApplicationReadyEvent
     */
    @Bean
    public ApplicationListener<ApplicationReadyEvent> applicationReadyEventApplicationListener() {
        return event -> {
            logger.info("eKYC Service application has started successfully and is ready to serve requests");
        };
    }
}