# LLM Response - code_generation_chunk_04
# Timestamp: 2025-06-11 10:32:32
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_04_029
# ==================================================

import 'package:flutter/material.dart';
import 'package:logging/logging.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../models/account.dart';
import '../services/api_service.dart';
import '../widgets/loading_indicator.dart';
import '../utils/formatters.dart';
import '../utils/validators.dart';

/// A screen that allows users to transfer money between accounts.
class TransferScreen extends StatefulWidget {
  final Account sourceAccount;

  const TransferScreen({Key? key, required this.sourceAccount}) : super(key: key);

  @override
  _TransferScreenState createState() => _TransferScreenState();
}

class _TransferScreenState extends State<TransferScreen> {
  static final Logger _logger = Logger('TransferScreen');
  
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  final _descriptionController = TextEditingController();
  
  bool _isLoading = false;
  List<Account> _userAccounts = [];
  Account? _selectedDestinationAccount;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _fetchUserAccounts();
  }

  @override
  void dispose() {
    _amountController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  /// Fetches all accounts belonging to the current user
  Future<void> _fetchUserAccounts() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final apiService = Provider.of<ApiService>(context, listen: false);
      final accounts = await apiService.getUserAccounts();
      
      // Filter out the source account from the list of destination accounts
      final filteredAccounts = accounts.where((account) => 
        account.id != widget.sourceAccount.id).toList();
      
      setState(() {
        _userAccounts = filteredAccounts;
        if (filteredAccounts.isNotEmpty) {
          _selectedDestinationAccount = filteredAccounts.first;
        }
      });
      
      _logger.info('Fetched ${filteredAccounts.length} potential destination accounts');
    } catch (e) {
      _logger.severe('Error fetching user accounts: $e');
      setState(() {
        _errorMessage = 'Failed to load your accounts. Please try again.';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Processes the transfer between accounts
  Future<void> _processTransfer() async {
    if (!_formKey.currentState!.validate() || _selectedDestinationAccount == null) {
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final amount = double.parse(_amountController.text);
      final description = _descriptionController.text.trim();
      
      // Mask PII in logs
      _logger.info('Processing transfer of \$${amount.toStringAsFixed(2)} from account ending in ${widget.sourceAccount.accountNumber.substring(widget.sourceAccount.accountNumber.length - 4)} to account ending in ${_selectedDestinationAccount!.accountNumber.substring(_selectedDestinationAccount!.accountNumber.length - 4)}');
      
      final apiService = Provider.of<ApiService>(context, listen: false);
      await apiService.transferFunds(
        sourceAccountId: widget.sourceAccount.id,
        destinationAccountId: _selectedDestinationAccount!.id,
        amount: amount,
        description: description,
      );

      _logger.info('Transfer completed successfully');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Transfer completed successfully')),
        );
        Navigator.pop(context, true); // Return true to indicate success
      }
    } catch (e) {
      _logger.severe('Error processing transfer: $e');
      setState(() {
        _errorMessage = 'Failed to complete transfer: ${e is ApiException ? e.message : 'An unexpected error occurred'}';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Transfer Money'),
      ),
      body: _isLoading 
        ? const Center(child: LoadingIndicator())
        : _buildTransferForm(),
    );
  }

  Widget _buildTransferForm() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildSourceAccountCard(),
            const SizedBox(height: 24),
            _buildDestinationAccountDropdown(),
            const SizedBox(height: 24),
            _buildAmountField(),
            const SizedBox(height: 16),
            _buildDescriptionField(),
            const SizedBox(height: 24),
            if (_errorMessage != null) ...[
              Text(
                _errorMessage!,
                style: TextStyle(color: Theme.of(context).colorScheme.error),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
            ],
            ElevatedButton(
              onPressed: _userAccounts.isEmpty || _selectedDestinationAccount == null
                ? null
                : _processTransfer,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: const Text('Transfer Money', style: TextStyle(fontSize: 16)),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSourceAccountCard() {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'From Account',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Account #: ${maskAccountNumber(widget.sourceAccount.accountNumber)}',
              style: const TextStyle(fontSize: 14),
            ),
            const SizedBox(height: 4),
            Text(
              'Type: ${widget.sourceAccount.type.name.toUpperCase()}',
              style: const TextStyle(fontSize: 14),
            ),
            const SizedBox(height: 4),
            Text(
              'Balance: ${formatCurrency(widget.sourceAccount.balance)}',
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDestinationAccountDropdown() {
    if (_userAccounts.isEmpty) {
      return const Card(
        elevation: 2,
        child: Padding(
          padding: EdgeInsets.all(16.0),
          child: Text(
            'No other accounts available for transfer. Please create another account first.',
            style: TextStyle(fontSize: 14),
          ),
        ),
      );
    }

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'To Account',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            DropdownButtonFormField<Account>(
              value: _selectedDestinationAccount,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              ),
              items: _userAccounts.map((account) {
                return DropdownMenuItem<Account>(
                  value: account,
                  child: Text(
                    '${account.type.name.toUpperCase()} - ${maskAccountNumber(account.accountNumber)}',
                    style: const TextStyle(fontSize: 14),
                  ),
                );
              }).toList(),
              onChanged: (Account? newValue) {
                setState(() {
                  _selectedDestinationAccount = newValue;
                });
              },
              validator: (value) {
                if (value == null) {
                  return 'Please select a destination account';
                }
                return null;
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAmountField() {
    return TextFormField(
      controller: _amountController,
      decoration: const InputDecoration(
        labelText: 'Amount',
        prefixText: '\$ ',
        border: OutlineInputBorder(),
      ),
      keyboardType: const TextInputType.numberWithOptions(decimal: true),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please enter an amount';
        }
        
        final amount = double.tryParse(value);
        if (amount == null) {
          return 'Please enter a valid amount';
        }
        
        if (amount <= 0) {
          return 'Amount must be greater than zero';
        }
        
        if (amount > widget.sourceAccount.balance) {
          return 'Insufficient funds';
        }
        
        return null;
      },
    );
  }

  Widget _buildDescriptionField() {
    return TextFormField(
      controller: _descriptionController,
      decoration: const InputDecoration(
        labelText: 'Description (Optional)',
        border: OutlineInputBorder(),
      ),
      maxLength: 100,
    );
  }

  /// Utility function to mask account number for display
  String maskAccountNumber(String accountNumber) {
    if (accountNumber.length <= 4) {
      return accountNumber;
    }
    return '****${accountNumber.substring(accountNumber.length - 4)}';
  }
}