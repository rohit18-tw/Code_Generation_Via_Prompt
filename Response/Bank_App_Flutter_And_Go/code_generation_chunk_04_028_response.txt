# LLM Response - code_generation_chunk_04
# Timestamp: 2025-06-11 10:32:00
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_04_028
# ==================================================

import 'package:flutter/material.dart';
import 'package:logging/logging.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../models/account.dart';
import '../models/transaction.dart';
import '../services/api_service.dart';
import '../widgets/loading_indicator.dart';
import '../utils/formatters.dart';

class AccountDetailsScreen extends StatefulWidget {
  final Account account;

  const AccountDetailsScreen({Key? key, required this.account}) : super(key: key);

  @override
  _AccountDetailsScreenState createState() => _AccountDetailsScreenState();
}

class _AccountDetailsScreenState extends State<AccountDetailsScreen> with SingleTickerProviderStateMixin {
  static final Logger _logger = Logger('AccountDetailsScreen');
  late TabController _tabController;
  bool _isLoading = true;
  List<Transaction> _transactions = [];
  String? _errorMessage;
  final DateFormat _dateFormat = DateFormat('MMM dd, yyyy');
  final DateFormat _timeFormat = DateFormat('hh:mm a');

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _fetchTransactions();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _fetchTransactions() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      _logger.info('Fetching transactions for account: ${_maskAccountId(widget.account.id)}');
      final apiService = Provider.of<ApiService>(context, listen: false);
      final transactions = await apiService.getTransactionsByAccountId(widget.account.id);
      
      setState(() {
        _transactions = transactions;
        _isLoading = false;
      });
      _logger.info('Successfully loaded ${transactions.length} transactions');
    } catch (e) {
      _logger.severe('Error fetching transactions: $e');
      setState(() {
        _errorMessage = 'Failed to load transactions. Please try again.';
        _isLoading = false;
      });
    }
  }

  String _maskAccountId(String id) {
    if (id.length > 4) {
      return '****${id.substring(id.length - 4)}';
    }
    return '****';
  }

  String _getTransactionStatusText(TransactionStatus status) {
    switch (status) {
      case TransactionStatus.completed:
        return 'Completed';
      case TransactionStatus.pending:
        return 'Pending';
      case TransactionStatus.failed:
        return 'Failed';
      default:
        return 'Unknown';
    }
  }

  Color _getTransactionStatusColor(TransactionStatus status) {
    switch (status) {
      case TransactionStatus.completed:
        return Colors.green;
      case TransactionStatus.pending:
        return Colors.orange;
      case TransactionStatus.failed:
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  String _getTransactionTypeText(TransactionType type) {
    switch (type) {
      case TransactionType.deposit:
        return 'Deposit';
      case TransactionType.withdrawal:
        return 'Withdrawal';
      case TransactionType.transfer:
        return 'Transfer';
      default:
        return 'Unknown';
    }
  }

  Widget _buildAccountDetailsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Card(
            elevation: 4,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Account Information',
                    style: Theme.of(context).textTheme.headline6,
                  ),
                  const SizedBox(height: 16),
                  _buildInfoRow('Account Number', widget.account.accountNumber),
                  _buildInfoRow('Account Type', _capitalizeFirst(widget.account.type.toString().split('.').last)),
                  _buildInfoRow('Balance', '\$${widget.account.balance.toStringAsFixed(2)}'),
                  _buildInfoRow('Status', _capitalizeFirst(widget.account.status.toString().split('.').last)),
                  _buildInfoRow('Created On', _dateFormat.format(widget.account.createdAt)),
                ],
              ),
            ),
          ),
          const SizedBox(height: 20),
          Card(
            elevation: 4,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Account Statistics',
                    style: Theme.of(context).textTheme.headline6,
                  ),
                  const SizedBox(height: 16),
                  _buildStatisticRow('Total Deposits', _calculateTotalDeposits()),
                  _buildStatisticRow('Total Withdrawals', _calculateTotalWithdrawals()),
                  _buildStatisticRow('Pending Transactions', _calculatePendingTransactions()),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontWeight: FontWeight.w500,
              color: Colors.grey,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatisticRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontWeight: FontWeight.w500,
              color: Colors.grey,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  String _calculateTotalDeposits() {
    double total = _transactions
        .where((t) => t.type == TransactionType.deposit && t.status == TransactionStatus.completed)
        .fold(0, (sum, transaction) => sum + transaction.amount);
    return '\$${total.toStringAsFixed(2)}';
  }

  String _calculateTotalWithdrawals() {
    double total = _transactions
        .where((t) => t.type == TransactionType.withdrawal && t.status == TransactionStatus.completed)
        .fold(0, (sum, transaction) => sum + transaction.amount);
    return '\$${total.toStringAsFixed(2)}';
  }

  String _calculatePendingTransactions() {
    int count = _transactions.where((t) => t.status == TransactionStatus.pending).length;
    return count.toString();
  }

  Widget _buildTransactionsTab() {
    if (_isLoading) {
      return const Center(child: LoadingIndicator());
    }

    if (_errorMessage != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(_errorMessage!, style: const TextStyle(color: Colors.red)),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _fetchTransactions,
              child: const Text('Retry'),
            ),
          ],
        ),
      );
    }

    if (_transactions.isEmpty) {
      return const Center(
        child: Text('No transactions found for this account.'),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(8.0),
      itemCount: _transactions.length,
      itemBuilder: (context, index) {
        final transaction = _transactions[index];
        return _buildTransactionCard(transaction);
      },
    );
  }

  Widget _buildTransactionCard(Transaction transaction) {
    bool isDeposit = transaction.type == TransactionType.deposit;
    bool isWithdrawal = transaction.type == TransactionType.withdrawal;
    
    IconData iconData;
    Color iconColor;
    
    if (isDeposit) {
      iconData = Icons.arrow_downward;
      iconColor = Colors.green;
    } else if (isWithdrawal) {
      iconData = Icons.arrow_upward;
      iconColor = Colors.red;
    } else {
      iconData = Icons.swap_horiz;
      iconColor = Colors.blue;
    }

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 6.0, horizontal: 4.0),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
        leading: CircleAvatar(
          backgroundColor: iconColor.withOpacity(0.2),
          child: Icon(iconData, color: iconColor),
        ),
        title: Row(
          children: [
            Expanded(
              child: Text(
                _getTransactionTypeText(transaction.type),
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
            ),
            Text(
              '${isWithdrawal ? '-' : isDeposit ? '+' : ''}\$${transaction.amount.toStringAsFixed(2)}',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: isDeposit ? Colors.green : isWithdrawal ? Colors.red : Colors.blue,
              ),
            ),
          ],
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 4),
            Text(
              transaction.description ?? 'No description',
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 4),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  _dateFormat.format(transaction.createdAt),
                  style: const TextStyle(fontSize: 12, color: Colors.grey),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                  decoration: BoxDecoration(
                    color: _getTransactionStatusColor(transaction.status).withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    _getTransactionStatusText(transaction.status),
                    style: TextStyle(
                      fontSize: 12,
                      color: _getTransactionStatusColor(transaction.status),
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
        onTap: () => _showTransactionDetails(transaction),
      ),
    );
  }

  void _showTransactionDetails(Transaction transaction) {
    _logger.info('Viewing details for transaction: ${_maskTransactionId(transaction.id)}');
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Container(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Center(
                child: Container(
                  width: 50,
                  height: 5,
                  decoration: BoxDecoration(
                    color: Colors.grey[300],
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: Text(
                  'Transaction Details',
                  style: Theme.of(context).textTheme.headline6,
                ),
              ),
              const SizedBox(height: 20),
              _buildDetailRow('Transaction ID', transaction.id),
              _buildDetailRow('Type', _getTransactionTypeText(transaction.type)),
              _buildDetailRow('Amount', '\$${transaction.amount.toStringAsFixed(2)}'),
              _buildDetailRow('Status', _getTransactionStatusText(transaction.status)),
              _buildDetailRow('Date', _dateFormat.format(transaction.createdAt)),
              _buildDetailRow('Time', _timeFormat.format(transaction.createdAt)),
              if (transaction.description != null)
                _buildDetailRow('Description', transaction.description!),
              if (transaction.metadata != null && transaction.metadata!.isNotEmpty)
                ..._buildMetadataRows(transaction.metadata!),
              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Close'),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  List<Widget> _buildMetadataRows(Map<String, dynamic> metadata) {
    List<Widget> rows = [];
    rows.add(
      Padding(
        padding: const EdgeInsets.only(top: 10, bottom: 5),
        child: Text(
          'Additional Information',
          style: Theme.of(context).textTheme.subtitle1?.copyWith(fontWeight: FontWeight.bold),
        ),
      ),
    );
    
    metadata.forEach((key, value) {
      rows.add(_buildDetailRow(_capitalizeFirst(key), value.toString()));
    });
    
    return rows;
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                color: Colors.grey,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _maskTransactionId(String id) {
    if (id.length > 4) {
      return '****${id.substring(id.length - 4)}';
    }
    return '****';
  }

  String _capitalizeFirst(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Account ${_maskAccountId(widget.account.accountNumber)}'),
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(text: 'Details'),
            Tab(text: 'Transactions'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildAccountDetailsTab(),
          _buildTransactionsTab(),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _logger.info('User initiated new transaction for account: ${_maskAccountId(widget.account.id)}');
          // Navigate to transaction creation screen
          // This would be implemented in a real app
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('New transaction feature coming soon')),
          );
        },
        child: const Icon(Icons.add),
        tooltip: 'New Transaction',
      ),
    );
  }
}