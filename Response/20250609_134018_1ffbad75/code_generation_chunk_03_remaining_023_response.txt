# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-09 13:48:25
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_023
# ==================================================

package com.ekyc.service.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Data Transfer Object for standardized error responses.
 * This class encapsulates error details to be returned to clients in a consistent format.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ErrorResponseDto implements Serializable {

    private static final long serialVersionUID = 1L;

    private String errorCode;
    private String message;
    private String requestId;
    private List<String> details;
    
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS")
    private LocalDateTime timestamp;
    
    private String path;

    /**
     * Default constructor
     */
    public ErrorResponseDto() {
        this.timestamp = LocalDateTime.now();
        this.details = new ArrayList<>();
    }

    /**
     * Constructor with error code and message
     *
     * @param errorCode the error code
     * @param message the error message
     */
    public ErrorResponseDto(String errorCode, String message) {
        this();
        this.errorCode = errorCode;
        this.message = message;
    }

    /**
     * Constructor with error code, message, and request ID
     *
     * @param errorCode the error code
     * @param message the error message
     * @param requestId the request ID
     */
    public ErrorResponseDto(String errorCode, String message, String requestId) {
        this(errorCode, message);
        this.requestId = requestId;
    }

    /**
     * Constructor with all fields
     *
     * @param errorCode the error code
     * @param message the error message
     * @param requestId the request ID
     * @param details the error details
     * @param path the request path
     */
    public ErrorResponseDto(String errorCode, String message, String requestId, List<String> details, String path) {
        this(errorCode, message, requestId);
        this.details = details != null ? details : new ArrayList<>();
        this.path = path;
    }

    /**
     * Get the error code
     *
     * @return the error code
     */
    public String getErrorCode() {
        return errorCode;
    }

    /**
     * Set the error code
     *
     * @param errorCode the error code to set
     */
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * Get the error message
     *
     * @return the error message
     */
    public String getMessage() {
        return message;
    }

    /**
     * Set the error message
     *
     * @param message the error message to set
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Get the request ID
     *
     * @return the request ID
     */
    public String getRequestId() {
        return requestId;
    }

    /**
     * Set the request ID
     *
     * @param requestId the request ID to set
     */
    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Get the error details
     *
     * @return the error details
     */
    public List<String> getDetails() {
        return details;
    }

    /**
     * Set the error details
     *
     * @param details the error details to set
     */
    public void setDetails(List<String> details) {
        this.details = details != null ? details : new ArrayList<>();
    }

    /**
     * Add a single error detail
     *
     * @param detail the error detail to add
     */
    public void addDetail(String detail) {
        if (this.details == null) {
            this.details = new ArrayList<>();
        }
        this.details.add(detail);
    }

    /**
     * Get the timestamp
     *
     * @return the timestamp
     */
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    /**
     * Set the timestamp
     *
     * @param timestamp the timestamp to set
     */
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Get the request path
     *
     * @return the request path
     */
    public String getPath() {
        return path;
    }

    /**
     * Set the request path
     *
     * @param path the request path to set
     */
    public void setPath(String path) {
        this.path = path;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ErrorResponseDto that = (ErrorResponseDto) o;
        return Objects.equals(errorCode, that.errorCode) &&
                Objects.equals(message, that.message) &&
                Objects.equals(requestId, that.requestId) &&
                Objects.equals(details, that.details) &&
                Objects.equals(timestamp, that.timestamp) &&
                Objects.equals(path, that.path);
    }

    @Override
    public int hashCode() {
        return Objects.hash(errorCode, message, requestId, details, timestamp, path);
    }

    @Override
    public String toString() {
        return "ErrorResponseDto{" +
                "errorCode='" + errorCode + '\'' +
                ", message='" + message + '\'' +
                ", requestId='" + requestId + '\'' +
                ", details=" + details +
                ", timestamp=" + timestamp +
                ", path='" + path + '\'' +
                '}';
    }
}