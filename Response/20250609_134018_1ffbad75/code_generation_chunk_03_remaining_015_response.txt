# LLM Response - code_generation_chunk_03_remaining
# Timestamp: 2025-06-09 13:45:50
# Model: claude-3-7-sonnet-20250219
# Interaction ID: code_generation_chunk_03_remaining_015
# ==================================================

package com.ekyc.service.enums;

import java.util.Arrays;
import java.util.Optional;

/**
 * Enumeration representing the consent types in the eKYC system.
 * This enum is used to track user consent for various operations in the system.
 * Currently supports YES and NO consent types.
 */
public enum ConsentType {
    YES("yes"),
    NO("no");

    private final String value;

    /**
     * Constructor for ConsentType enum.
     *
     * @param value The string representation of the consent type
     */
    ConsentType(String value) {
        this.value = value;
    }

    /**
     * Returns the string value of the consent type.
     *
     * @return The string representation of the consent type
     */
    public String getValue() {
        return value;
    }

    /**
     * Finds a ConsentType enum by its string value.
     *
     * @param value The string value to search for
     * @return An Optional containing the matching ConsentType, or empty if not found
     */
    public static Optional<ConsentType> fromValue(String value) {
        return Arrays.stream(ConsentType.values())
                .filter(consentType -> consentType.value.equalsIgnoreCase(value))
                .findFirst();
    }

    /**
     * Converts a string value to a ConsentType enum.
     * If the value doesn't match any enum, returns null.
     *
     * @param value The string value to convert
     * @return The matching ConsentType or null if not found
     */
    public static ConsentType parse(String value) {
        return fromValue(value).orElse(null);
    }

    /**
     * Returns a string representation of the ConsentType.
     *
     * @return The string representation of the consent type
     */
    @Override
    public String toString() {
        return value;
    }
}